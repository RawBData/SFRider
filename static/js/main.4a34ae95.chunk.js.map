{"version":3,"sources":["maps/racks.jsx","maps/traffic.jsx","maps/crime.jsx","App.js","serviceWorker.js","index.js"],"names":["RacksMap","racks","React","useState","activeRack","setActiveRack","Map","center","zoom","TileLayer","url","attribution","map","rack","Marker","key","objectid","position","lat","lon","onClick","Popup","onClose","spaces","install_yr","CrimeMap","crime","activeCrime","setActiveCrime","console","log","event","incident_number","latitude","longitude","police_district","incident_description","resolution","Icon","iconUrl","iconSize","App","state","mainMapSelection","bikeRacks","accidentData","changeMap","bind","fetch","then","results","json","data","setState","filter","incident_category","this","newMap","mapDisplay","class","type","name","id","checked","for","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a34ae95.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\n\nexport default function RacksMap({racks}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              {racks.map(rack => (\n                <Marker\n                  key={rack.objectid}\n                  position={[\n                    rack.lat,\n                    rack.lon\n                  ]}\n                  onClick={() => {\n                    {/* console.log(\"marker opened\") */}\n                    setActiveRack(rack);\n                  }}\n                />\n              ))}\n    \n              {activeRack && (\n                <Popup\n                  position={[\n                    activeRack.lat,\n                    activeRack.lon\n                  ]}\n                  onClose={() => {\n                    {/* console.log(\"marker closed\") */}\n\n                    setActiveRack(null);\n                  }}\n                >\n                  <div>\n                    <h2>Racks : {activeRack.racks}</h2>\n                    <h2>Spaces : {activeRack.spaces}</h2>\n                    <h2>Yr Installed : {activeRack.install_yr}</h2>\n    \n                  </div>\n                </Popup>\n              )}\n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\n\nexport default function RacksMap({racks}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              \n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\n\nexport default function CrimeMap({crime}) {\n  const [activeCrime, setActiveCrime] = React.useState(null);\n  console.log(crime);\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              {crime.map(event => (\n                <Marker\n                  key={event.incident_number}\n                  position={[\n                    event.latitude,\n                    event.longitude\n                  ]}\n                  onClick={() => {\n                    {/* console.log(\"marker opened\") */}\n                    setActiveCrime(event);\n                  }}\n                />\n              ))}\n    \n              {activeCrime && (\n                <Popup\n                  position={[\n                    activeCrime.latitude,\n                    activeCrime.longitude\n                  ]}\n                  onClose={() => {\n                    {/* console.log(\"marker closed\") */}\n\n                    setActiveCrime(null);\n                  }}\n                >\n                  <div>\n                    <h2>Police District : {activeCrime.police_district}</h2>\n                    <h2>Description : {activeCrime.incident_description}</h2>\n                    <h2>Resolution : {activeCrime.resolution}</h2>\n    \n                  </div>\n                </Popup>\n              )}\n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"./App.css\";\nimport Racks from \"./maps/racks\";\nimport Traffic from \"./maps/traffic\";\nimport Crime from \"./maps/crime\";\n\n\nexport const icon = new Icon({\n  iconUrl: \"../public/bike_black.png\",\n  iconSize: [25, 25]\n});\n\nclass App extends React.Component{\n\n  // SF Coordinates\n  // latitude:37.773943,\n  // longitude:-122.449484,\n\n  \n\n  constructor(){\n    super();\n    this.state={\n      mainMapSelection:\"racks\",\n      bikeRacks : [],\n      crime : [],\n      accidentData : []\n    }\n\n    this.changeMap = this.changeMap.bind(this);\n\n  }\n\n  componentDidMount(){\n    fetch(\"https://data.sfgov.org/resource/hn4j-6fx5.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      console.log(data);\n      this.setState({\n        bikeRacks: data,\n      })\n    })\n\n    fetch(\"https://data.sfgov.org/resource/wg3w-h783.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      console.log(data);\n      data = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n      this.setState({\n        crime: data,\n      })\n    })\n\n\n    console.log(\"state\",this.state.bikeRacks);\n\n  }\n\n  changeMap(newMap){\n    console.log(\"changing maps to \", newMap);\n      this.setState({\n        mainMapSelection : newMap\n      })\n  }\n\n  render(){\n    let mapDisplay;\n    switch (this.state.mainMapSelection) {\n      case \"racks\":\n        mapDisplay = (<Racks racks={this.state.bikeRacks}/>)\n        break;\n      case \"traffic\":\n        console.log(\"chose traffic to display\")\n        mapDisplay = (<Traffic racks={this.state.bikeRacks}/>)\n        break;\n    \n      case \"crime\":\n        console.log(\"chose traffic to display\")\n        mapDisplay = (<Crime crime={this.state.crime}/>)\n        break;\n    \n      default:\n        break;\n    }\n\n\n    return (\n      <div>\n        <div>\n                <h1>\n                  SFRider: Biking SF Timelapse Data\n                </h1>\n        </div>\n\n        <div class=\"tabs-wrapper\">\n          <div class=\"tabs\">\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-1\" \n                      checked={this.state.mainMapSelection===\"racks\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"racks\")}}\n              />\n              <label for=\"tab-1\" class=\"tab-label\">Racks</label>\n            </div>\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-2\" \n                      checked={this.state.mainMapSelection===\"traffic\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"traffic\")}}\n              />\n              <label for=\"tab-2\" class=\"tab-label\">Traffic</label>\n            </div>\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-3\" \n                      checked={this.state.mainMapSelection===\"accidents\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"accidents\")}}\n              />\n              <label for=\"tab-3\" class=\"tab-label\">Accidents</label>\n            </div>\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-4\" \n                      checked={this.state.mainMapSelection===\"crime\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"crime\")}}\n              />\n              <label for=\"tab-4\" class=\"tab-label\">Crime</label>\n            </div>\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-5\" \n                      checked={this.state.mainMapSelection===\"all\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"all\")}}\n              />\n              <label for=\"tab-5\" class=\"tab-label\">All</label>\n            </div>\n\n          </div> \n        </div>\n\n        <div>\n          {mapDisplay}\n        </div>\n\n        \n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}