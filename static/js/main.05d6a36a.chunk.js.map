{"version":3,"sources":["images/racks_icon.png","images/crime.png","images/lights.png","images/SFRiderLogo_04.png","images/lock.png","images/poi.png","images/test.jpg","maps/racksLegend.jsx","maps/racks.jsx","maps/legend.jsx","maps/traffic.jsx","maps/crime.jsx","maps/accidents.jsx","maps/lights.jsx","maps/routes.jsx","maps/scenic.jsx","maps/all.jsx","components/modal.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Legend","props","years","theIcon","L","icon","iconUrl","require","iconSize","i","this","markers","length","element","yr","parseInt","install_yr","push","yr2015_Pres","layerGroup","map","rk","marker","lat","lon","bindPopup","spaces","yr2010_2014","yr2005_2009","yrpre_2005","yrAll","leaflet","control","layers","position","collapsed","addTo","scale","MapControl","BaseLayer","withLeaflet","LayersControl","Overlay","Icon","RacksMap","racks","React","useState","activeRack","setActiveRack","console","log","Map","center","zoom","TileLayer","url","attribution","name","LayerGroup","filter","Marker","key","objectid","point","latitude","longitude","onClick","checked","Popup","onClose","street","legend","onAdd","div","DomUtil","create","cats","backgroundColors","letterColors","labels","level","bColor","tColor","innerHTML","join","traffic","maxZoom","opacity","points","longitudeExtractor","p","coordinates","latitudeExtractor","intensityExtractor","parseFloat","yr2015_pm","CrimeMap","crime","activeCrime","setActiveCrime","event","incident_id","incident_number","Math","floor","random","police_district","incident_description","resolution","rectangle","LayersControlExample","Circle","fillColor","radius","stroke","color","FeatureGroup","Rectangle","bounds","Component","LightsIcon","Routes","routes","activeLight","setActiveLight","lights","light","street1","street2","paths","path","cnn","Polyline","positions","shape","lanes","seperated","rackIcon","crimeIcon","poiIcon","pointsOfInterest","viewPort","setViewport","animate","viewport","onbaselayerchange","it","changeViewPortCenter","className","weight","place","Modal","e","show","class","id","href","target","App","modalShow","setState","state","mainMapSelection","bikeRacks","accidents","changeMap","bind","fetch","then","results","json","data","crimeData","incident_category","accidentData","data1","data2","ele","j","coordEle","symbology","newMap","mapDisplay","src","Logo","alt","type","defaultChecked","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05d6a36a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/racks_icon.74942809.png\";","module.exports = __webpack_public_path__ + \"static/media/crime.596b3fdf.png\";","module.exports = __webpack_public_path__ + \"static/media/lights.3343e2ef.png\";","module.exports = __webpack_public_path__ + \"static/media/SFRiderLogo_04.15538f6f.png\";","module.exports = __webpack_public_path__ + \"static/media/lock.49d5c9f7.png\";","module.exports = __webpack_public_path__ + \"static/media/poi.bae03b23.png\";","module.exports = __webpack_public_path__ + \"static/media/test.73d7cf17.jpg\";","import { MapControl, withLeaflet, Marker } from \"react-leaflet\";\nimport L from \"leaflet\";\n\n\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() { \n\n    // console.log(this.props.markers);\n    let years = {\n      \"2015-Present\":[],\n      \"2010-2014\":[],\n      \"2005-2009\":[],\n      \"pre-2005\":[],\n    }\n\n    const theIcon = L.icon({\n      iconUrl: require('../images/lock.png'),\n      iconSize: [35, 35],\n    });\n\n    for (let i = 0; i < this.props.markers.length; i++) {\n      const element = this.props.markers[i];\n      let yr = parseInt(element.install_yr)\n      switch (true) {\n        case (yr>2014):\n          years[\"2015-Present\"].push(element)\n          break;\n      \n        case (yr>2009):\n          years[\"2010-2014\"].push(element)\n          break;\n\n        case (yr>2004):\n          years[\"2005-2009\"].push(element)\n          break;\n\n        default:\n          years[\"pre-2005\"].push(element)\n          break;\n      }\n    }\n\n    var yr2015_Pres = L.layerGroup(years[\"2015-Present\"].map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    var yr2010_2014 = L.layerGroup(years[\"2010-2014\"].map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    var yr2005_2009 = L.layerGroup(years[\"2005-2009\"].map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    var yrpre_2005 = L.layerGroup(years[\"pre-2005\"].map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    var yrAll = L.layerGroup(this.props.markers.map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    \n    const { map } = this.props.leaflet;\n\n    \n    L.control.layers({},{\n    \"2015-Present\":yr2015_Pres,\n    \"2010-2014\" :yr2010_2014,\n    \"2005-2009\" :yr2005_2009,\n    \"pre-2005\" :yrpre_2005,\n    \"All\" : yrAll,\n    },{position:\"topleft\",collapsed:false}).addTo(map)\n\n    L.control.scale().addTo(map);\n  }\n  \n  componentWillUnmount(){\n      //This overwrite original version wich attemped to remove too late and crashed site\n    //   console.log(\"this should replace old one\");\n  }\n}\n\nexport default withLeaflet(Legend);\n","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, FeatureGroup, LayerGroup, LayersControl } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\nimport RacksLegend from './racksLegend';\n\nconst { BaseLayer, Overlay } = LayersControl;\n\nconst icon = new Icon({\n  iconUrl: require(\"../images/racks_icon.png\"),\n  iconSize: [30, 30]\n});\n\nconst center = [37.773943, -122.449484]\n\nexport default function RacksMap({racks}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n  console.log(racks)\n  return (\n      <div>\n\n        <div> \n        <Map center={[37.773943, -122.449484]} zoom={13.4}> \n            <TileLayer\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            />    \n\n            <LayersControl position=\"topright\" collapsed={false}>\n                \n                <BaseLayer name=\"2015-Present\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)>2014).map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.point.latitude,\n                            rk.point.longitude\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer name=\"2010-2014\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)>2009 && parseInt(rk.install_yr)<2015).map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.point.latitude,\n                            rk.point.longitude\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer checked name=\"2005-2009\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)>2004 && parseInt(rk.install_yr)<2010).map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.point.latitude,\n                            rk.point.longitude\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer name=\"Pre-2005\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)<2005).map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.point.latitude,\n                            rk.point.longitude\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer name=\"All\">\n                  <LayerGroup>\n                      {racks.map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.point.latitude,\n                            rk.point.longitude\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n                \n            </LayersControl>\n\n\n            {activeRack && (\n                  <Popup\n                    position={[\n                      activeRack.point.latitude,\n                      activeRack.point.longitude\n                    ]}\n                    onClose={() => {\n                      {/* console.log(\"marker closed\") */}\n\n                      setActiveRack(null);\n                    }}\n                  >\n                    <div>\n                      <h2>Spaces : {activeRack.spaces}</h2>\n                      <h2>Year Installed : {activeRack.install_yr}</h2>\n                      <h2>Street : {activeRack.street}</h2>\n                    </div>\n                  </Popup>\n            )}\n          </Map>\n        </div>\n  \n      </div>\n  );\n}","import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() { \n\n    const legend = L.control({ position: \"topright\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      const cats = [\"Light\", \"Medium\", \"Heavy\", \"Dense\"];\n      // const backgroundColors = [\"green\",\"yellow\",\"red\",\"purple\"]\n      const backgroundColors = [\"144, 155, 244\",\"103, 232, 51\",\"  248, 254, 77\",\"254,102,31\"];\n\n      const letterColors = [\"white\",\"black\",\"black\",\"white\"]\n      let labels = [];\n\n      for (let i = 0; i < cats.length; i++) {\n        let level = cats[i];\n        let bColor = backgroundColors[i];\n        let tColor = letterColors[i];\n\n        labels.push(\n          '<i style=\"background:rgb(' +\n            bColor + ');color:' + tColor +';' +\n            '\"> ' +\n            level + '</i>'\n        );\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    const { map } = this.props.leaflet;\n    legend.addTo(map);\n  }\n  \n  componentWillUnmount(){\n      //This overwrite original version wich attemped to remove too late and crashed site\n    //   console.log(\"this should replace old one\");\n  }\n}\n\nexport default withLeaflet(Legend);\n","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, Circle, MapControl } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport HeatmapLayer from \"react-leaflet-heatmap-layer\";\nimport \"../App.css\";\nimport Legend from './legend';\n\n\nexport default function RacksMap({traffic}) {\n  const [activeTraffic, setActiveTraffic] = React.useState(null);\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} maxZoom={14} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n\n              <Legend />\n\n              <HeatmapLayer\n                opacity={.1}\n                points={traffic}\n                maxZoom={10}\n                longitudeExtractor={p => p.point.coordinates[0]}\n                latitudeExtractor={p => p.point.coordinates[1]}\n                intensityExtractor={p => parseFloat(p.yr2015_pm)} \n              />\n              \n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\nconst icon = new Icon({\n  iconUrl: require(\"../images/crime.png\"),\n  iconSize: [35, 35]\n});\n\nexport default function CrimeMap({crime}) {\n  const [activeCrime, setActiveCrime] = React.useState(null);\n  return (\n          <div>\n            \n      \n            <div>\n              <Map center={[37.773943, -122.449484]} zoom={13.4}>\n      \n                <TileLayer\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n      \n                {crime.map(event => (\n                  <Marker\n                    key={event.incident_id+event.incident_number + (Math.floor(Math.random() *1000) )}\n                    position={[\n                      event.latitude,\n                      event.longitude\n                    ]}\n                    onClick={() => {\n                      {/* console.log(\"marker opened\") */}\n                      setActiveCrime(event);\n                    }}\n                    icon={icon}\n                  />\n                ))}\n      \n                {activeCrime && (\n                  <Popup\n                    position={[\n                      activeCrime.latitude,\n                      activeCrime.longitude\n                    ]}\n                    onClose={() => {\n                      {/* console.log(\"marker closed\") */}\n\n                      setActiveCrime(null);\n                    }}\n                  >\n                    <div>\n                      <h2>Police District : {activeCrime.police_district}</h2>\n                      <h2>Description : {activeCrime.incident_description}</h2>\n                      <h2>Resolution : {activeCrime.resolution}</h2>\n      \n                    </div>\n                  </Popup>\n                )}\n              </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React, { Component } from 'react'\nimport {\n  Circle,\n  FeatureGroup,\n  LayerGroup,\n  LayersControl,\n  Map,\n  Marker,\n  Popup,\n  Rectangle,\n  TileLayer,\n} from \"react-leaflet\"\nconst { BaseLayer, Overlay } = LayersControl\n\nconst center = [37.773943, -122.449484]\nconst rectangle = [\n  [37.773943, -122.449484],\n  [37.773943, -122.49],\n]\n\nexport default class LayersControlExample extends Component<{}> {\n  render() {\n    return (\n      <Map center={center} zoom={13}>\n        <LayersControl position=\"topright\" collapsed={false}>\n          <BaseLayer name=\"Color\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </BaseLayer>\n          <BaseLayer checked name=\"Black and White\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </BaseLayer>\n          <Overlay name=\"Injury\">\n            <Marker position={center}>\n              <Popup>\n                A pretty CSS3 popup. <br /> Easily customizable.\n              </Popup>\n            </Marker>\n          </Overlay>\n          <Overlay checked name=\"Fatal\">\n            <LayerGroup>\n              <Circle center={center} fillColor=\"blue\" radius={200} />\n              <Circle\n                center={center}\n                fillColor=\"red\"\n                radius={100}\n                stroke={false}\n              />\n              <LayerGroup>\n                <Circle\n                  center={[center[0], center[1]-0.05]}\n                  color=\"green\"\n                  fillColor=\"green\"\n                  radius={100}\n                />\n              </LayerGroup>\n            </LayerGroup>\n          </Overlay>\n          <Overlay name=\"Path\">\n            <FeatureGroup color=\"purple\">\n              <Popup>Popup for path</Popup>\n              <Rectangle bounds={rectangle} />\n            </FeatureGroup>\n          </Overlay>\n        </LayersControl>\n      </Map>\n    )\n  }\n}","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\nconst icon = new Icon({\n  iconUrl: require(\"../images/lights.png\"),\n  iconSize: [25, 30]\n});\n\nexport default function CrimeMap({lights}) {\n  const [activeLight, setActiveLight] = React.useState(null);\n  console.log(lights);\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              {lights.map(light => (\n                <Marker\n                  key={light.objectid}\n                  position={[\n                    light.point.coordinates[1],\n                    light.point.coordinates[0]\n                  ]}\n                  onClick={() => {\n                    {/* console.log(\"marker opened\") */}\n                    setActiveLight(light);\n                  }}\n                  icon={icon}\n                />\n              ))}\n    \n              {activeLight && (\n                <Popup\n                  position={[\n                    activeLight.point.coordinates[1],\n                    activeLight.point.coordinates[0]\n                  ]}\n                  onClose={() => {\n                    {/* console.log(\"marker closed\") */}\n\n                    setActiveLight(null);\n                  }}\n                >\n                  <div>\n                    <h2>Corner of {activeLight.street1} and {activeLight.street2}</h2>\n                  </div>\n                </Popup>\n              )}\n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React, { Component } from 'react'\nimport {\n  Circle,\n  FeatureGroup,\n  LayerGroup,\n  LayersControl,\n  Map,\n  Marker,\n  Popup,\n  Rectangle,\n  Polyline,\n  TileLayer,\n} from \"react-leaflet\"\nimport { Icon } from 'leaflet'\nconst { BaseLayer, Overlay } = LayersControl\n\nconst center = [37.773943, -122.449484]\nconst rectangle = [\n  [37.773943, -122.449484],\n  [37.773943, -122.49],\n]\n\nconst LightsIcon = new Icon({\n  iconUrl: require(\"../images/lights.png\"),\n  iconSize: [30, 30]\n});\n\nexport default function Routes({routes}) {\n    const [activeLight, setActiveLight] = React.useState(null);\n\n\n\n\n\n    // console.log(routes)\n    return (\n      <Map center={center} zoom={13}>\n        <LayersControl position=\"topright\" collapsed={false}>\n          <BaseLayer checked name=\"Color\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </BaseLayer>\n          <BaseLayer name=\"Black and White\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </BaseLayer>\n\n          <Overlay name=\"Lights\">\n            <LayerGroup>\n              {routes.lights.map(light => (\n                  <Marker\n                    key={light.objectid + (Math.floor(Math.random()*10000)*Math.floor(Math.random()*10000))}\n                    position={[\n                      light.point.coordinates[1],\n                      light.point.coordinates[0]\n                    ]}\n                    onClick={() => {\n                      {/* console.log(\"marker opened\") */}\n                      setActiveLight(light);\n                    }}\n                    icon={LightsIcon}\n                  />\n                ))}\n\n                {activeLight && (\n                <Popup\n                  position={[\n                    activeLight.point.coordinates[1],\n                    activeLight.point.coordinates[0]\n                  ]}\n                  onClose={() => {\n                    {/* console.log(\"marker closed\") */}\n\n                    setActiveLight(null);\n                  }}\n                >\n                  <div>\n                    <h2>Corner of {activeLight.street1} and {activeLight.street2}</h2>\n                  </div>\n                </Popup>\n              )}\n            </LayerGroup>\n          </Overlay>\n\n          <Overlay checked name=\"Paths\">\n            <LayerGroup>\n              {routes.paths.map(path=>(   \n              <FeatureGroup key={path.cnn + (Math.floor(Math.random()*10000)*Math.floor(Math.random()*10000))} color=\"green\">\n                <Popup>Bicycle paths (Class I) are off-street paved bikeways. They are separated from vehicle traffic, but are almost always shared with pedestrians</Popup>\n                <Polyline opacity={.35} color=\"lime\" positions={path.shape.coordinates} />\n              </FeatureGroup>\n              ))}\n            </LayerGroup>\n          </Overlay>\n\n          <Overlay checked name=\"Lanes\">\n          <LayerGroup>\n              {routes.lanes.map(path=>(   \n              <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000)*Math.floor(Math.random()*10000) )} color=\"orange\">\n                <Popup>A standard bike lane (Class II) is a portion of road reserved for the preferential or exclusive use of people biking, indicated by road markings.</Popup>\n                <Polyline opacity={.35} color=\"orange\" positions={path.shape.coordinates} />\n              </FeatureGroup>\n              ))}\n            </LayerGroup>\n          </Overlay>\n\n          <Overlay checked name=\"Routes\">\n          <LayerGroup>\n              {routes.routes.map(path=>(   \n              <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000)*Math.floor(Math.random()*10000) )} color=\"purple\">\n                <Popup>Shared lanes (Class III - sharrows) are typically wide travel lanes shared by bicyclists and vehicles.</Popup>\n                <Polyline opacity={.35} color=\"purple\" positions={path.shape.coordinates} />\n              </FeatureGroup>\n              ))}\n            </LayerGroup>\n          </Overlay>\n\n          <Overlay checked name=\"Seperated Bikeway\">\n          <LayerGroup>\n              {routes.seperated.map(path=>(   \n              <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000) )} color=\"blue\">\n                <Popup>Separated bikeways (Class IV), also commonly referred to as cycle tracks or protected bikeways, are bicycle facilities that are separated from traffic by parked cars, safe-hit posts, transit islands or other physical barriers.</Popup>\n                <Polyline opacity={.35} positions={path.shape.coordinates} />\n              </FeatureGroup>\n              ))}\n            </LayerGroup>\n          </Overlay>\n        </LayersControl>\n      </Map>\n    )\n  \n}","import React, { Component } from 'react'\nimport {\n  Circle,\n  FeatureGroup,\n  LayerGroup,\n  LayersControl,\n  Map,\n  Marker,\n  Popup,\n  Rectangle,\n  Polyline,\n  TileLayer,\n  Viewport\n} from \"react-leaflet\"\nimport { Icon } from 'leaflet'\nimport HeatmapLayer from \"react-leaflet-heatmap-layer\";\nconst { BaseLayer, Overlay } = LayersControl;\n\n/*Focus on GG Park\n// let center = [37.768850, -122.485990];\n// const center = [37.768850, -122.481883];\n//presidio\n// newCetner = [37.796711, -122.463787]\n*/\n\nconst rackIcon = new Icon({\n  iconUrl: require(\"../images/racks_icon.png\"),\n  iconSize: [30, 30]\n});\n\nconst crimeIcon = new Icon({\n  iconUrl: require(\"../images/crime.png\"),\n  iconSize: [35, 35]\n});\n\nconst poiIcon = new Icon({\n  iconUrl: require(\"../images/poi.png\"),\n  iconSize: [35, 35]\n});\n\n  //adding specific points of interest by hand\n  const pointsOfInterest=[{\n    name:\"Conservatory of Flowers\",\n    lon:37.7717577,\n    lat:-122.4717941\n  },{\n    name:\"De Young Museum\",\n    lon:37.771317,\n    lat:-122.468709 \n  },{\n    name:\"Academy of Science\",\n    lon:37.7701666,\n    lat:-122.4692006\n  },{\n    name:\"Botanical Garden\",\n    lon:37.7675161,\n    lat:-122.4696875\n  },{\n    name:\"Stow Lake Boathouse / Water / Restrooms\",\n    lon:37.7707741,\n    lat:-122.4776102\n  },{\n    name:\"Portals of the Past\",\n    lon:37.770858,\n    lat:-122.4828262\n  },{\n    name:\"Bisons\",\n    lon:37.769635, \n    lat:-122.498065\n  },{\n    name:\"Dutch Windmill\",\n    lon:37.770456,\n    lat:-122.509555\n  },{\n    name:\"Polo Field With Cycling Track\",\n    lon:37.768337,\n    lat:-122.492269\n  },{\n    name:\"Strawberry Hill\",\n    lon:37.768597,\n    lat:-122.475353\n  }//presidio\n  ,{\n    name:\"Baker Beach\",\n    lon:37.793469,\n    lat:-122.484008\n  },{\n    name:\"Golden Gate Bridge\",\n    lon:37.807756,\n    lat:-122.474770\n  },{\n    name:\"Fort Point\",\n    lon:37.810519,\n    lat:-122.476586\n  },{\n    name:\"Walt Disney Museum\",\n    lon:37.801304,\n    lat:-122.458492\n  },{\n    name:\"Crissy Field\",\n    lon:37.804301,\n    lat:-122.465436\n  },{\n    name:\"Cafe RX\",\n    lon:37.800440,\n    lat:-122.452095\n  },{\n    name:\"Fort Point Brewing\",\n    lon:37.803262,\n    lat:-122.464960\n  },{\n    name:\"Battery Cranston\",\n    lon:37.806992,\n    lat:-122.476647\n  },{\n    name:\"Nike Missle Site\",\n    lon:37.791920,\n    lat:-122.474626\n  }\n  //Embarcadero\n  ,{\n    name:\"Oracle\",\n    lon:37.777341,\n    lat:-122.390367\n  },{\n    name:\"Bay Bridge Overpass\",\n    lon:37.788628,\n    lat:-122.387820\n  },{\n    name:\"Ferry Building\",\n    lon:37.795366,\n    lat:-122.393788\n  },{\n    name:\"Rincon Park/Giant Arrow\",\n    lon:37.791612,\n    lat:-122.389657\n  },{\n    name:\"Exploratorium\",\n    lon:37.801027,\n    lat:-122.398914\n  },{\n    name:\"Pier 39\",\n    lon:37.808472,\n    lat:-122.409894\n  },{\n    name:\"Fishermans Wharf\",\n    lon:37.807616,\n    lat:-122.420830\n  }\n]\n\nexport default function RacksMap({racks,routes,traffic,crime}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n  const [center, setCenter] = React.useState([37.768850, -122.485990]);\n  const [viewPort, setViewport] = React.useState( {center: [37.768850, -122.485990] ,zoom: 14.5} );\n\n \n  /*\n  onload={()=>{setViewport( {center: [37.768850, -122.485990] ,zoom: 14.5} )}}\n  onload={()=>{setViewport({center: [37.796711, -122.463787],zoom: 14.5} )}}\n\n  */\n\n\n\n\n\n const changeViewPortCenter = (name)=>{\n   switch (name) {\n      case \"GG Park\":\n        setViewport( {center: [37.768850, -122.485990], zoom: 14.5} )\n      break;\n\n      case \"The Presidio\":\n        setViewport( {center: [37.80, -122.467], zoom: 14.5} )\n      break;\n\n      case \"The Embarcadero\":\n        setViewport( {center: [37.794852, -122.393027], zoom: 14.5} )\n      break;     \n   \n     default:\n       break;\n   }\n }\n  \n  return (\n          <div>\n            <div>    \n            <Map \n              animate={true}\n              viewport={viewPort}\n              onbaselayerchange={(it)=>{changeViewPortCenter(it.name)}}\n            >\n            <TileLayer  \n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n              <LayersControl className=\"layerscontrol\" position=\"topright\" collapsed={false} >\n\n                <BaseLayer checked name=\"GG Park\" lon=\"test\" lat=\"test\">\n                <LayerGroup>\n                        <FeatureGroup>\n                          <Popup>\n                            <div>\n                              <h2>Place : Golden Gate Park</h2>\n                            </div>\n                          </Popup>\n\n                          <Marker\n                            key={Math.random()}\n                            position={[37.768850, -122.485990]}\n                            icon={poiIcon}\n                          />\n                        </FeatureGroup>\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer name=\"The Presidio\" >\n                    <LayerGroup>\n                        <FeatureGroup>\n                          <Popup>\n                            <div>\n                              <h2>Place : The Presidio</h2>\n                            </div>\n                          </Popup>\n\n                          <Marker\n                            key={Math.random()}\n                            position={[37.796711, -122.463787]}\n                            icon={poiIcon}\n                          />\n                        </FeatureGroup>\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer name=\"The Embarcadero\" >\n                    <LayerGroup>\n                        <FeatureGroup>\n                          <Popup>\n                            <div>\n                              <h2>Place : The Embarcadero</h2>\n                            </div>\n                          </Popup>\n\n                          <Marker\n                            key={Math.random()}\n                            position={[37.795883, -122.402943]}\n                            icon={poiIcon}\n                          />\n                        </FeatureGroup>\n                  </LayerGroup>\n                </BaseLayer>\n\n\n\n                <Overlay checked name=\"Routes\">\n                  <LayerGroup>\n\n                    {routes.paths.map(path=>(   \n                      <FeatureGroup key={path.cnn + (Math.floor(Math.random()*10000)*Math.floor(Math.random()*10000))} color=\"green\">\n                        <Popup>Bicycle paths (Class I) are off-street paved bikeways. They are separated from vehicle traffic, but are almost always shared with pedestrians</Popup>\n                        <Polyline opacity={.35} weight={6} color=\"lime\" positions={path.shape.coordinates} />\n                      </FeatureGroup>\n                    ))}\n                    \n                    {routes.lanes.map(path=>(   \n                      <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000)*Math.floor(Math.random()*10000) )} color=\"orange\">\n                        <Popup>A standard bike lane (Class II) is a portion of road reserved for the preferential or exclusive use of people biking, indicated by road markings.</Popup>\n                        <Polyline opacity={.35} weight={6} color=\"orange\" positions={path.shape.coordinates} />\n                      </FeatureGroup>\n                    ))}\n                    \n                    {routes.routes.map(path=>(   \n                      <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000)*Math.floor(Math.random()*10000) )} color=\"purple\">\n                        <Popup>Shared lanes (Class III - sharrows) are typically wide travel lanes shared by bicyclists and vehicles.</Popup>\n                        <Polyline opacity={.35} weight={6} color=\"purple\" positions={path.shape.coordinates} />\n                      </FeatureGroup>\n                    ))}\n\n                    {routes.seperated.map(path=>(   \n                      <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000) )} color=\"blue\">\n                        <Popup>Separated bikeways (Class IV), also commonly referred to as cycle tracks or protected bikeways, are bicycle facilities that are separated from traffic by parked cars, safe-hit posts, transit islands or other physical barriers.</Popup>\n                        <Polyline opacity={.35} weight={6} positions={path.shape.coordinates} />\n                      </FeatureGroup>\n                    ))}\n\n                  </LayerGroup>\n                </Overlay>\n\n                <Overlay checked name=\"Racks\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)>2009).map( rk => (\n                        <FeatureGroup>\n                          <Popup>\n                            <div>\n                              <h2>Spaces : {rk.spaces}</h2>\n                              <h2>Year Installed : {rk.install_yr}</h2>\n                              <h2>Street : {rk.street}</h2>\n                            </div>\n                          </Popup>\n\n                          <Marker\n                            key={rk.objectid}\n                            position={[\n                              rk.point.latitude,\n                              rk.point.longitude\n                            ]}\n                            icon={rackIcon}\n                          />\n                        </FeatureGroup>\n                      ))}\n                  </LayerGroup>\n                </Overlay>\n\n                <Overlay checked name=\"Traffic\">\n                  <LayerGroup>\n                    <HeatmapLayer\n                      opacity={.1}\n                      points={traffic}\n                      maxZoom={10}\n                      longitudeExtractor={p => p.point.coordinates[0]}\n                      latitudeExtractor={p => p.point.coordinates[1]}\n                      intensityExtractor={p => parseFloat(p.yr2015_pm)} \n                    />\n                  </LayerGroup>\n                </Overlay>\n\n                <Overlay checked name=\"Crime\">\n                  <LayerGroup>\n                    {crime.map(event => (\n                      <FeatureGroup>\n                        <Popup>\n                          <div>\n                            <h2>Police District : {event.police_district}</h2>\n                            <h2>Description : {event.incident_description}</h2>\n                            <h2>Resolution : {event.resolution}</h2>\n                          </div>\n                        </Popup>\n                        <Marker\n                          key={event.incident_id+event.incident_number + (Math.floor(Math.random() *1000) )}\n                          position={[\n                            event.latitude,\n                            event.longitude\n                          ]}\n                          icon={crimeIcon}\n                        />\n                      </FeatureGroup>  \n                    ))}\n        \n                  </LayerGroup>\n                </Overlay>\n\n                <Overlay checked name=\"Points of Interest\">\n                  <LayerGroup>\n                    {pointsOfInterest.map(place => (\n                      <FeatureGroup>\n                        <Popup>\n                          <div>\n                            <h2>Name : {place.name}</h2>\n                          </div>\n                        </Popup>\n                        <Marker\n                          key={\"key\"+(Math.floor(Math.random() *1000) )}\n                          position={[\n                            place.lon,\n                            place.lat\n                          ]}\n                          icon={poiIcon}\n                        />\n                      </FeatureGroup>  \n                    ))}\n        \n                  </LayerGroup>\n                </Overlay>\n\n              </LayersControl>\n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React, { Component } from 'react'\nimport {\n  Circle,\n  FeatureGroup,\n  LayerGroup,\n  LayersControl,\n  Map,\n  Marker,\n  Popup,\n  Rectangle,\n  Polyline,\n  TileLayer,\n} from \"react-leaflet\"\nimport { Icon } from 'leaflet'\nimport HeatmapLayer from \"react-leaflet-heatmap-layer\";\nconst { BaseLayer, Overlay } = LayersControl;\n\n\nconst center = [37.773943, -122.449484];\n//Creating icon\nconst rackIcon = new Icon({\n  iconUrl: require(\"../images/racks_icon.png\"),\n  iconSize: [30, 30]\n});\n\nconst crimeIcon = new Icon({\n  iconUrl: require(\"../images/crime.png\"),\n  iconSize: [35, 35]\n});\n\nexport default function RacksMap({racks,routes,traffic,crime}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n  console.log(racks)\n  return (\n          <div>\n            \n      \n            <div>\n            \n            <Map center={center} zoom={13}>\n              <LayersControl position=\"topright\" collapsed={false}>\n                <BaseLayer checked name=\"Color\">\n                  <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                  />\n                </BaseLayer>\n                <BaseLayer name=\"Black and White\">\n                  <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n                  />\n                </BaseLayer>\n\n                <Overlay checked name=\"Routes\">\n                  <LayerGroup>\n\n                    {routes.paths.map(path=>(   \n                      <FeatureGroup key={path.cnn + (Math.floor(Math.random()*10000)*Math.floor(Math.random()*10000))} color=\"green\">\n                        <Popup>Bicycle paths (Class I) are off-street paved bikeways. They are separated from vehicle traffic, but are almost always shared with pedestrians</Popup>\n                        <Polyline opacity={.35} color=\"lime\" positions={path.shape.coordinates} />\n                      </FeatureGroup>\n                    ))}\n                    \n                    {routes.lanes.map(path=>(   \n                      <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000)*Math.floor(Math.random()*10000) )} color=\"orange\">\n                        <Popup>A standard bike lane (Class II) is a portion of road reserved for the preferential or exclusive use of people biking, indicated by road markings.</Popup>\n                        <Polyline opacity={.35} color=\"orange\" positions={path.shape.coordinates} />\n                      </FeatureGroup>\n                    ))}\n                    \n                    {routes.routes.map(path=>(   \n                      <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000)*Math.floor(Math.random()*10000) )} color=\"purple\">\n                        <Popup>Shared lanes (Class III - sharrows) are typically wide travel lanes shared by bicyclists and vehicles.</Popup>\n                        <Polyline opacity={.35} color=\"purple\" positions={path.shape.coordinates} />\n                      </FeatureGroup>\n                    ))}\n\n                    {routes.seperated.map(path=>(   \n                      <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000) )} color=\"blue\">\n                        <Popup>Separated bikeways (Class IV), also commonly referred to as cycle tracks or protected bikeways, are bicycle facilities that are separated from traffic by parked cars, safe-hit posts, transit islands or other physical barriers.</Popup>\n                        <Polyline opacity={.35} positions={path.shape.coordinates} />\n                      </FeatureGroup>\n                    ))}\n\n                  </LayerGroup>\n                </Overlay>\n\n                <Overlay checked name=\"Racks\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.spaces)>2).map( rk => (\n                        <FeatureGroup>\n                          <Popup>\n                            <div>\n                              <h2>Spaces : {rk.spaces}</h2>\n                              <h2>Year Installed : {rk.install_yr}</h2>\n                              <h2>Street : {rk.street}</h2>\n                            </div>\n                          </Popup>\n\n                          <Marker\n                            key={rk.objectid}\n                            position={[\n                              rk.point.latitude,\n                              rk.point.longitude\n                            ]}\n                            icon={rackIcon}\n                          />\n                        </FeatureGroup>\n                      ))}\n                  </LayerGroup>\n                </Overlay>\n\n                <Overlay name=\"Traffic\">\n                  <LayerGroup>\n                    <HeatmapLayer\n                      opacity={.1}\n                      points={traffic}\n                      maxZoom={10}\n                      longitudeExtractor={p => p.point.coordinates[0]}\n                      latitudeExtractor={p => p.point.coordinates[1]}\n                      intensityExtractor={p => parseFloat(p.yr2015_pm)} \n                    />\n                  </LayerGroup>\n                </Overlay>\n\n                <Overlay name=\"Crime\">\n                  <LayerGroup>\n                    {crime.map(event => (\n                      <FeatureGroup>\n                        <Popup>\n                          <div>\n                            <h2>Police District : {event.police_district}</h2>\n                            <h2>Description : {event.incident_description}</h2>\n                            <h2>Resolution : {event.resolution}</h2>\n                          </div>\n                        </Popup>\n                        <Marker\n                          key={event.incident_id+event.incident_number + (Math.floor(Math.random() *1000) )}\n                          position={[\n                            event.latitude,\n                            event.longitude\n                          ]}\n                          icon={crimeIcon}\n                        />\n                      </FeatureGroup>  \n                    ))}\n        \n                  </LayerGroup>\n                </Overlay>\n\n              </LayersControl>\n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nexport default class Modal extends React.Component {\n    onClose = e => {\n      this.props.onClose && this.props.onClose(e);\n    };\n    render() {\n      if (!this.props.show) {\n        return null;\n      }\n      return (\n        <div class=\"modal\" id=\"modal\">\n          <h2 className=\"modal-title\">About SFRider</h2>\n          <div className=\"content-container\">\n              <p className=\"modal-content\">\n                This project is focused on displaying data from API endpoints in novel and engaging ways. <br />\n                I used an open source library called React-Leaflet to draw the maps and used OpenSF datasets as API endpoints. <br />\n                I designed my own .png markers using Preview and utilized built-in leaflet.js functionality to draw paths and shapes. <br />\n                As a bonus, I created a custom \"legend\" component which is displayed on one of the maps.<br />\n                <br />\n              </p>\n              <p className=\"modal-content-2\">\n                Each of the 6 maps gives a different snapshot of the SF biking experience. \n                <br />* Traffic uses bike traffic data because other than red lights, SF is pretty bike friendly place.\n                <br />* Racks are bikeracks listed by year installed.\n                <br />* Crime uses The OpenSF Crime data, which is filtered for theft of property crimes.\n                <br />* The last three maps, Routes, All and Scenic, are using OpenSF datasets of bike lanes all over the city. \n                <br />* The 4 different levels of lanes are color coordinated and when clicked give a brief description of the type of lane.\n                <br />* The Scenic map showcases three of San Francisco's world famouse bicycle riding experiences. \n                <br />\n                </p>\n              <p className=\"modal-content\">\n\n                <br />Check out some of my other great projects on my github <a className=\"portfolio-link\" href=\"https://rawbdata.github.io/porfolio/\" target=\"_blank\">porfolio</a> page.\n               </p>\n              </div>\n          <div class=\"actions\">\n              \n            <button class=\"toggle-button\" onClick={this.onClose}>\n              To The Maps!\n\n            </button>\n          </div>\n        </div>\n      );\n    }\n  }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, MapControl, withLeaflet } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"./App.css\";\nimport Racks from \"./maps/racks\";\nimport Traffic from \"./maps/traffic\";\nimport Crime from \"./maps/crime\";\nimport Accidents from \"./maps/accidents\";\nimport Lights from \"./maps/lights\";\nimport Routes from \"./maps/routes\";\nimport Scenic from \"./maps/scenic\";\nimport All from \"./maps/all\";\nimport Modal from \"./components/modal\";\n\nimport Logo from \"./images/SFRiderLogo_04.png\";\n\n\nconst icon = new Icon({\n  iconUrl: require(\"./images/test.jpg\"),\n  iconSize: [25, 25]\n});\n\n\nclass App extends React.Component{\n\n  // SF Coordinates\n  // latitude:37.773943,\n  // longitude:-122.449484,\n\n  \n\n  constructor(){\n    super();\n    this.state={\n      mainMapSelection:\"racks\",\n      bikeRacks : [],\n      crime : [],\n      accidents : [],\n      traffic: [],\n      routes: {},\n      modalShow: true,\n    }\n\n    this.changeMap = this.changeMap.bind(this);\n\n  }\n\n  componentDidMount(){\n\n    //fetch racks data\n    fetch(\"https://data.sfgov.org/resource/hn4j-6fx5.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      this.setState({\n        bikeRacks: data,\n      })\n    })\n\n    //fetch crime and accident data\n    fetch(\"https://data.sfgov.org/resource/wg3w-h783.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      let crimeData = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n      let accidentData = data.filter(crime=> crime.latitude && crime.incident_category === \"Traffic Collision\");\n      this.setState({\n        crime: crimeData,\n        accidents: accidentData\n      })\n    })\n\n    //fetch accident data\n    // fetch(\"https://data.sfgov.org/resource/nuek-vuh3.json\")\n    // .then(results=> {return results.json()})\n    // .then(data=>{\n    //   // console.log(data);\n    //   // let crimeData = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n    //   let accidentData = data.filter(acc=> acc.location.latitude && acc.call_type === \"Traffic Collision\");\n    //   // console.log(accidentData);\n    //   this.setState({\n    //     accidents: accidentData\n    //   })\n    // })\n\n    //fetch traffic data\n    // fetch(\"https://data.sfgov.org/resource/awac-r27z.json\")\n    fetch(\"https://data.sfgov.org/resource/v4v2-5x7s.json\")   \n    .then(results=> {return results.json()})\n    .then(data=>{\n      //data = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n      this.setState({\n        traffic: data,\n      })\n    })\n\n    //https://data.sfgov.org/resource/ygmz-vaxd.json\n    //fetch Bicyle routes location\n    fetch(\"https://data.sfgov.org/resource/a5zr-cehj.json\")\n    .then(results=> {return results.json()})\n    .then(data1=>{\n      let routes = {};\n      routes.lights = data1;\n      fetch(\"https://data.sfgov.org/resource/ygmz-vaxd.json\")\n      .then(results=> {return results.json()})\n      .then(data2=>{\n        routes.paths = [];\n        routes.lanes = [];\n        routes.routes = [];\n        routes.seperated = [];\n        for (let i = 0; i < data2.length; i++) {\n          const ele = data2[i];\n          for (let j = 0; j < ele.shape.coordinates.length; j++) {\n            const coordEle = ele.shape.coordinates[j];\n            let longitude = coordEle[0];\n            let latitude = coordEle[1];\n            ele.shape.coordinates[j] = [latitude,longitude];\n          }\n          switch (ele.symbology) {\n            case \"BIKE ROUTE\":\n              routes.routes.push(ele);\n            break;\n\n            case \"BIKE PATH\":\n              routes.paths.push(ele);\n            break;\n\n            case \"SEPARATED BIKEWAY\":\n              routes.seperated.push(ele);\n            break;\n          \n            default:\n              routes.lanes.push(ele);\n            break;\n          }\n        }\n\n\n\n        this.setState({\n          routes: routes,\n        })\n      })\n    })\n\n    // console.log(\"state\",this.state.bikeRacks);\n\n\n  }\n\n  changeMap(newMap){\n      this.setState({\n        mainMapSelection : newMap\n      })\n  }\n\n  modalShow = e => {\n    this.setState({\n      modalShow: !this.state.modalShow\n    });\n  };\n\n  render(){\n    let mapDisplay;\n    switch (this.state.mainMapSelection) {\n      case \"racks\":\n        mapDisplay = (<Racks \n                        icon={icon}\n                        racks={this.state.bikeRacks}/>)\n        break;\n      case \"traffic\":\n        // console.log(\"chose traffic to display\")\n        mapDisplay = (<Traffic traffic={this.state.traffic}/>)\n        break;\n    \n      case \"crime\":\n        // console.log(\"chose traffic to display\")\n        mapDisplay = (<Crime crime={this.state.crime}/>)\n        break;\n\n      case \"routes\":\n          // console.log(\"chose routes to display\")\n          mapDisplay = (<Routes routes={this.state.routes}/>)\n          break;\n\n      case \"accidents\":\n        // console.log(\"chose accidents to display\")\n        mapDisplay = (<Accidents accidents={this.state.accidents}/>)\n        break;\n\n      case \"all\":\n        // console.log(\"chose all to display\")\n        mapDisplay = (<All \n                        crime={this.state.crime}\n                        accidents={this.state.accidents}\n                        racks={this.state.bikeRacks}\n                        traffic={this.state.traffic}\n                        routes={this.state.routes}\n                      />)\n        break;\n\n        case \"scenic\":\n        // console.log(\"chose scenic to display\")\n        mapDisplay = (<Scenic \n                        crime={this.state.crime}\n                        accidents={this.state.accidents}\n                        racks={this.state.bikeRacks}\n                        traffic={this.state.traffic}\n                        routes={this.state.routes}\n                      />)\n        break;\n    \n      default:\n        break;\n    }\n\n\n    return (\n      <div className=\"main-container\">\n        \n\n        <div className=\"page-container\">\n\n        <div className=\"header\">\n          <div className=\"logo\">\n            <img className=\"logo-image\" src={Logo} alt=\"website logo\" />\n          </div>\n\n          <div className=\"tabs-wrapper\">\n            <div className=\"tabs\">\n              \n              <div className=\"tab\">\n                <input type=\"radio\" \n                        name=\"css-tabs\" \n                        id=\"tab-1\" \n                        defaultChecked={this.state.mainMapSelection===\"traffic\"} \n                        className=\"tab-switch\"\n                        onClick={()=>{this.changeMap(\"traffic\")}}\n                />\n                <label htmlFor=\"tab-1\" className=\"tab-label\">Traffic</label>\n              </div>\n\n              <div className=\"tab\">\n                <input type=\"radio\" \n                        name=\"css-tabs\" \n                        id=\"tab-2\" \n                        defaultChecked={this.state.mainMapSelection===\"racks\"} \n                        className=\"tab-switch\"\n                        onClick={()=>{this.changeMap(\"racks\")}}\n                />\n                <label htmlFor=\"tab-2\" className=\"tab-label\">Racks</label>\n              </div>\n              \n              <div className=\"tab\">\n                <input type=\"radio\" \n                        name=\"css-tabs\" \n                        id=\"tab-4\" \n                        defaultChecked={this.state.mainMapSelection===\"crime\"} \n                        className=\"tab-switch\"\n                        onClick={()=>{this.changeMap(\"crime\")}}\n                />\n                <label htmlFor=\"tab-4\" className=\"tab-label\">Crime</label>\n              </div>\n\n              <div className=\"tab\">\n                <input type=\"radio\" \n                        name=\"css-tabs\" \n                        id=\"tab-5\" \n                        defaultChecked={this.state.mainMapSelection===\"routes\"} \n                        className=\"tab-switch\"\n                        onClick={()=>{this.changeMap(\"routes\")}}\n                />\n                <label htmlFor=\"tab-5\" className=\"tab-label\">Routes</label>\n              </div>\n\n\n              <div className=\"tab\">\n                <input type=\"radio\" \n                        name=\"css-tabs\" \n                        id=\"tab-6\" \n                        defaultChecked={this.state.mainMapSelection===\"all\"} \n                        className=\"tab-switch\"\n                        onClick={()=>{this.changeMap(\"all\")}}\n                />\n                <label htmlFor=\"tab-6\" className=\"tab-label\">All</label>\n              </div>\n\n              <div className=\"tab\">\n                <input type=\"radio\" \n                        name=\"css-tabs\" \n                        id=\"tab-7\" \n                        defaultChecked={this.state.mainMapSelection===\"scenic\"} \n                        className=\"tab-switch\"\n                        onClick={()=>{this.changeMap(\"scenic\")}}\n                />\n                <label htmlFor=\"tab-7\" className=\"tab-label\">Scenic</label>\n              </div>\n\n            </div> \n          </div>\n        </div>\n\n\n\n        <div className=\"map-container\">\n          {mapDisplay}\n        </div>\n\n        </div>\n\n        <div className=\"modal-container\">\n        <Modal onClose={this.modalShow} show={this.state.modalShow}/>\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}