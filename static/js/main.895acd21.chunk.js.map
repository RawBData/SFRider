{"version":3,"sources":["maps/racks.jsx","maps/legend.jsx","maps/traffic.jsx","maps/crime.jsx","maps/accidents.jsx","maps/all.jsx","App.js","serviceWorker.js","index.js"],"names":["RacksMap","racks","React","useState","activeRack","setActiveRack","Map","center","zoom","TileLayer","url","attribution","map","rack","Marker","key","objectid","position","lat","lon","onClick","Popup","onClose","spaces","install_yr","Legend","props","legend","L","control","onAdd","div","DomUtil","create","grades","colors","labels","i","length","level","color","push","innerHTML","join","this","leaflet","addTo","MapControl","withLeaflet","traffic","setActiveTraffic","console","log","event","Circle","fillColor","model6_vol","radius","fillOpacity","stroke","point","coordinates","CrimeMap","crime","activeCrime","setActiveCrime","incident_number","latitude","longitude","police_district","incident_description","resolution","Icon","iconUrl","iconSize","App","state","mainMapSelection","bikeRacks","accidents","changeMap","bind","fetch","then","results","json","data","setState","filter","incident_category","newMap","mapDisplay","class","type","name","id","checked","for","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.895acd21.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\n\nexport default function RacksMap({racks}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              {racks.map(rack => (\n                <Marker\n                  key={rack.objectid}\n                  position={[\n                    rack.lat,\n                    rack.lon\n                  ]}\n                  onClick={() => {\n                    {/* console.log(\"marker opened\") */}\n                    setActiveRack(rack);\n                  }}\n                />\n              ))}\n    \n              {activeRack && (\n                <Popup\n                  position={[\n                    activeRack.lat,\n                    activeRack.lon\n                  ]}\n                  onClose={() => {\n                    {/* console.log(\"marker closed\") */}\n\n                    setActiveRack(null);\n                  }}\n                >\n                  <div>\n                    <h2>Racks : {activeRack.racks}</h2>\n                    <h2>Spaces : {activeRack.spaces}</h2>\n                    <h2>Yr Installed : {activeRack.install_yr}</h2>\n    \n                  </div>\n                </Popup>\n              )}\n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() { \n\n    const legend = L.control({ position: \"topright\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      const grades = [\"Light\", \"Average\", \"Medium\", \"Heavy\"];\n      const colors = [\"green\",\"yellow\",\"red\",\"purple\"]\n      let labels = [];\n\n      for (let i = 0; i < grades.length; i++) {\n        let level = grades[i];\n        let color = colors[i]\n\n        labels.push(\n          '<i style=\"background:' +\n            color +\n            '\"></i> ' +\n            level\n        );\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    const { map } = this.props.leaflet;\n    legend.addTo(map);\n  }\n}\n\nexport default withLeaflet(Legend);\n","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, Circle } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\nimport Legend from './legend';\n\n\nexport default function RacksMap({traffic}) {\n  const [activeTraffic, setActiveTraffic] = React.useState(null);\n\n  console.log(traffic)\n\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n\n              {/* <Legend /> */}\n    \n              {traffic.map(event => (\n                <Circle\n                  fillColor={ \n                    event.model6_vol > 700000 ? \"purple\" : \n                    event.model6_vol > 500000 ? \"red\" :\n                    event.model6_vol > 300000 ? \"gold\" :\n                    \"green\"\n                    }\n                  radius={200} \n                  fillOpacity={.4}\n                  stroke={false}\n                  key={event.objectid}\n                  center={[\n                    event.point.coordinates[1],\n                    event.point.coordinates[0]\n                  ]}\n                  onClick={() => {\n                    {/* console.log(\"marker opened\") */}\n                    setActiveTraffic(event);\n                  }}\n                />\n              ))}\n\n              \n              \n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\n\nexport default function CrimeMap({crime}) {\n  const [activeCrime, setActiveCrime] = React.useState(null);\n  console.log(crime);\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              {crime.map(event => (\n                <Marker\n                  key={event.incident_number}\n                  position={[\n                    event.latitude,\n                    event.longitude\n                  ]}\n                  onClick={() => {\n                    {/* console.log(\"marker opened\") */}\n                    setActiveCrime(event);\n                  }}\n                />\n              ))}\n    \n              {activeCrime && (\n                <Popup\n                  position={[\n                    activeCrime.latitude,\n                    activeCrime.longitude\n                  ]}\n                  onClose={() => {\n                    {/* console.log(\"marker closed\") */}\n\n                    setActiveCrime(null);\n                  }}\n                >\n                  <div>\n                    <h2>Police District : {activeCrime.police_district}</h2>\n                    <h2>Description : {activeCrime.incident_description}</h2>\n                    <h2>Resolution : {activeCrime.resolution}</h2>\n    \n                  </div>\n                </Popup>\n              )}\n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\n\nexport default function RacksMap({racks}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              \n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\n\nexport default function RacksMap({racks}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              \n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, MapControl, withLeaflet } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"./App.css\";\nimport Racks from \"./maps/racks\";\nimport Traffic from \"./maps/traffic\";\nimport Crime from \"./maps/crime\";\nimport Accidents from \"./maps/accidents\";\nimport All from \"./maps/all\";\n\n\nexport const icon = new Icon({\n  iconUrl: \"../public/bike_black.png\",\n  iconSize: [25, 25]\n});\n\nclass App extends React.Component{\n\n  // SF Coordinates\n  // latitude:37.773943,\n  // longitude:-122.449484,\n\n  \n\n  constructor(){\n    super();\n    this.state={\n      mainMapSelection:\"racks\",\n      bikeRacks : [],\n      crime : [],\n      accidents : [],\n      traffic: []\n    }\n\n    this.changeMap = this.changeMap.bind(this);\n\n  }\n\n  componentDidMount(){\n\n    //fetch racks data\n    fetch(\"https://data.sfgov.org/resource/hn4j-6fx5.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      //console.log(data);\n      this.setState({\n        bikeRacks: data,\n      })\n    })\n\n    //fetch crime data\n    fetch(\"https://data.sfgov.org/resource/wg3w-h783.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      //console.log(data);\n      data = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n      this.setState({\n        crime: data,\n      })\n    })\n\n    //fetch traffic data\n    fetch(\"https://data.sfgov.org/resource/awac-r27z.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      console.log(data);\n      //data = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n      this.setState({\n        traffic: data,\n      })\n    })\n\n    // console.log(\"state\",this.state.bikeRacks);\n\n\n  }\n\n  changeMap(newMap){\n    console.log(\"changing maps to \", newMap);\n      this.setState({\n        mainMapSelection : newMap\n      })\n  }\n\n  render(){\n    let mapDisplay;\n    switch (this.state.mainMapSelection) {\n      case \"racks\":\n        mapDisplay = (<Racks racks={this.state.bikeRacks}/>)\n        break;\n      case \"traffic\":\n        console.log(\"chose traffic to display\")\n        mapDisplay = (<Traffic traffic={this.state.traffic}/>)\n        break;\n    \n      case \"crime\":\n        console.log(\"chose traffic to display\")\n        mapDisplay = (<Crime crime={this.state.crime}/>)\n        break;\n\n      case \"accidents\":\n        console.log(\"chose accidents to display\")\n        mapDisplay = (<Accidents accidents={this.state.accidents}/>)\n        break;\n\n      case \"all\":\n        console.log(\"chose all to display\")\n        mapDisplay = (<All \n                        crime={this.state.crime}\n                        accidents={this.state.accidents}\n                        racks={this.state.bikeRacks}\n                        traffic={this.state.traffic}\n                      />)\n        break;\n    \n      default:\n        break;\n    }\n\n\n    return (\n      <div>\n        <div>\n                <h1>\n                  SFRider: Biking SF Timelapse Data\n                </h1>\n        </div>\n\n        <div class=\"tabs-wrapper\">\n          <div class=\"tabs\">\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-1\" \n                      checked={this.state.mainMapSelection===\"racks\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"racks\")}}\n              />\n              <label for=\"tab-1\" class=\"tab-label\">Racks</label>\n            </div>\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-2\" \n                      checked={this.state.mainMapSelection===\"traffic\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"traffic\")}}\n              />\n              <label for=\"tab-2\" class=\"tab-label\">Traffic</label>\n            </div>\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-3\" \n                      checked={this.state.mainMapSelection===\"accidents\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"accidents\")}}\n              />\n              <label for=\"tab-3\" class=\"tab-label\">Accidents</label>\n            </div>\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-4\" \n                      checked={this.state.mainMapSelection===\"crime\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"crime\")}}\n              />\n              <label for=\"tab-4\" class=\"tab-label\">Crime</label>\n            </div>\n\n            <div class=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-5\" \n                      checked={this.state.mainMapSelection===\"all\"} \n                      class=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"all\")}}\n              />\n              <label for=\"tab-5\" class=\"tab-label\">All</label>\n            </div>\n\n          </div> \n        </div>\n\n        <div>\n          {mapDisplay}\n        </div>\n\n        \n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}