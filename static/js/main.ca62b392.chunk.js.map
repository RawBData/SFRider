{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Icon","iconUrl","iconSize","state","bikeRacks","activeRack","rackDisplay","setActiveRack","fetch","then","results","json","data","console","log","setState","this","Map","center","zoom","TileLayer","url","attribution","map","rack","Marker","key","objectid","position","lat","lon","onClick","setActiverack","Popup","onClose","racks","spaces","install_yr","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mTA8GeA,G,MAxGK,IAAIC,OAAK,CAC3BC,QAAS,2BACTC,SAAU,CAAC,GAAI,M,YAWf,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTC,UAAY,GACZC,WAAa,KACbC,aAAc,GAGhB,EAAKD,WAAa,KAClB,EAAKE,cAAgB,KATV,E,iFAYO,IAAD,OACjBC,MAAM,kDACLC,MAAK,SAAAC,GAAW,OAAOA,EAAQC,UAC/BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZX,UAAWQ,OAIfC,QAAQC,IAAI,QAAQE,KAAKb,MAAMC,a,+BAIxB,IAAD,OACN,OACE,6BACE,6BACE,kEAKF,6BACA,kBAACa,EAAA,EAAD,CAAKC,OAAQ,CAAC,WAAY,YAAaC,KAAM,MAE3C,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAGbN,KAAKb,MAAMC,UAAUmB,KAAI,SAAAC,GAAI,OAC5B,kBAACC,EAAA,EAAD,CACEC,IAAKF,EAAKG,SACVC,SAAU,CACRJ,EAAKK,IACLL,EAAKM,KAEPC,QAAS,WACP,EAAKC,cAAgBR,EACrB,EAAKT,SAAS,CACZV,WAAYmB,EACZlB,aAAa,UAMpBU,KAAKb,MAAME,YACV,kBAAC4B,EAAA,EAAD,CACEL,SAAU,CACRZ,KAAKb,MAAME,WAAWwB,IACtBb,KAAKb,MAAME,WAAWyB,KAExBI,QAAS,WACP,EAAKnB,SAAS,CACZV,WAAa,KACbC,aAAc,MAIlB,6BACE,uCAAaU,KAAKb,MAAME,WAAW8B,OACnC,wCAAcnB,KAAKb,MAAME,WAAW+B,QACpC,8CAAoBpB,KAAKb,MAAME,WAAWgC,qB,GApFxCC,IAAMC,YCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.ca62b392.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"./App.css\";\n\n\nexport const icon = new Icon({\n  iconUrl: \"../public/bike_black.png\",\n  iconSize: [25, 25]\n});\n\nclass App extends React.Component{\n\n  // SF Coordinates\n  // latitude:37.773943,\n  // longitude:-122.449484,\n\n  \n\n  constructor(){\n    super();\n    this.state={\n      bikeRacks : [],\n      activeRack : null,\n      rackDisplay : false\n    }\n\n    this.activeRack = null; \n    this.setActiveRack = null;\n  }\n\n  componentDidMount(){\n    fetch(\"https://data.sfgov.org/resource/hn4j-6fx5.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      console.log(data);\n      this.setState({\n        bikeRacks: data,\n      })\n    })\n\n    console.log(\"state\",this.state.bikeRacks);\n  }\n\n\n  render(){\n    return (\n      <div>\n        <div>\n          <h1>\n            SFRider: Biking SF Timelapse Data\n          </h1>\n        </div>\n  \n        <div>\n        <Map center={[37.773943, -122.449484]} zoom={13.4}>\n\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n\n          {this.state.bikeRacks.map(rack => (\n            <Marker\n              key={rack.objectid}\n              position={[\n                rack.lat,\n                rack.lon\n              ]}\n              onClick={() => {\n                this.setActiverack = rack;\n                this.setState({\n                  activeRack: rack,\n                  rackDisplay: true\n                })\n              }}\n            />\n          ))}\n\n          {this.state.activeRack && (\n            <Popup\n              position={[\n                this.state.activeRack.lat,\n                this.state.activeRack.lon\n              ]}\n              onClose={() => {\n                this.setState({\n                  activeRack : null,\n                  rackDisplay : false\n                })\n              }}\n            >\n              <div>\n                <h2>Racks : {this.state.activeRack.racks}</h2>\n                <h2>Spaces : {this.state.activeRack.spaces}</h2>\n                <h2>Yr Installed : {this.state.activeRack.install_yr}</h2>\n\n              </div>\n            </Popup>\n          )}\n        </Map>\n  \n        </div>\n  \n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}