{"version":3,"sources":["images/lights.png","images/lock.png","images/racks_icon.png","images/crime.png","images/test.jpg","maps/racksLegend.jsx","maps/racks.jsx","maps/legend.jsx","maps/traffic.jsx","maps/crime.jsx","maps/accidents.jsx","maps/lights.jsx","maps/routes.jsx","maps/all.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Legend","props","years","theIcon","L","icon","iconUrl","require","iconSize","i","this","markers","length","element","yr","parseInt","install_yr","push","yr2015_Pres","layerGroup","map","rk","marker","lat","lon","bindPopup","spaces","yr2010_2014","yr2005_2009","yrpre_2005","yrAll","leaflet","control","layers","position","collapsed","addTo","scale","MapControl","BaseLayer","withLeaflet","LayersControl","Overlay","Icon","RacksMap","racks","React","useState","activeRack","setActiveRack","console","log","Map","center","zoom","TileLayer","url","attribution","name","LayerGroup","filter","Marker","key","objectid","onClick","checked","Popup","onClose","street","legend","onAdd","div","DomUtil","create","cats","backgroundColors","letterColors","labels","level","bColor","tColor","innerHTML","join","traffic","setActiveTraffic","event","Circle","fillColor","model6_vol","radius","fillOpacity","stroke","point","coordinates","CrimeMap","crime","activeCrime","setActiveCrime","incident_id","incident_number","Math","floor","random","latitude","longitude","police_district","incident_description","resolution","rectangle","LayersControlExample","color","FeatureGroup","Rectangle","bounds","Component","LightsIcon","Routes","routes","activeLight","setActiveLight","lights","light","street1","street2","paths","path","cnn","Polyline","opacity","positions","shape","lanes","seperated","App","state","mainMapSelection","bikeRacks","accidents","changeMap","bind","fetch","then","results","json","data","setState","crimeData","incident_category","accidentData","data1","data2","ele","j","coordEle","symbology","newMap","mapDisplay","className","type","id","defaultChecked","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.015b2a39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lights.3343e2ef.png\";","module.exports = __webpack_public_path__ + \"static/media/lock.49d5c9f7.png\";","module.exports = __webpack_public_path__ + \"static/media/racks_icon.74942809.png\";","module.exports = __webpack_public_path__ + \"static/media/crime.596b3fdf.png\";","module.exports = __webpack_public_path__ + \"static/media/test.73d7cf17.jpg\";","import { MapControl, withLeaflet, Marker } from \"react-leaflet\";\nimport L from \"leaflet\";\n\n\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() { \n\n    // console.log(this.props.markers);\n    let years = {\n      \"2015-Present\":[],\n      \"2010-2014\":[],\n      \"2005-2009\":[],\n      \"pre-2005\":[],\n    }\n\n    const theIcon = L.icon({\n      iconUrl: require('../images/lock.png'),\n      iconSize: [35, 35],\n    });\n\n    for (let i = 0; i < this.props.markers.length; i++) {\n      const element = this.props.markers[i];\n      let yr = parseInt(element.install_yr)\n      switch (true) {\n        case (yr>2014):\n          years[\"2015-Present\"].push(element)\n          break;\n      \n        case (yr>2009):\n          years[\"2010-2014\"].push(element)\n          break;\n\n        case (yr>2004):\n          years[\"2005-2009\"].push(element)\n          break;\n\n        default:\n          years[\"pre-2005\"].push(element)\n          break;\n      }\n    }\n\n    var yr2015_Pres = L.layerGroup(years[\"2015-Present\"].map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    var yr2010_2014 = L.layerGroup(years[\"2010-2014\"].map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    var yr2005_2009 = L.layerGroup(years[\"2005-2009\"].map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    var yrpre_2005 = L.layerGroup(years[\"pre-2005\"].map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    var yrAll = L.layerGroup(this.props.markers.map( rk => (L.marker([rk.lat, rk.lon],{icon: theIcon}).bindPopup(`Spaces: ${rk.spaces}`))))\n    \n    \n    const { map } = this.props.leaflet;\n\n    \n    L.control.layers({},{\n    \"2015-Present\":yr2015_Pres,\n    \"2010-2014\" :yr2010_2014,\n    \"2005-2009\" :yr2005_2009,\n    \"pre-2005\" :yrpre_2005,\n    \"All\" : yrAll,\n    },{position:\"topleft\",collapsed:false}).addTo(map)\n\n    L.control.scale().addTo(map);\n  }\n  \n  componentWillUnmount(){\n      //This overwrite original version wich attemped to remove too late and crashed site\n    //   console.log(\"this should replace old one\");\n  }\n}\n\nexport default withLeaflet(Legend);\n","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, FeatureGroup, LayerGroup, LayersControl } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\nimport RacksLegend from './racksLegend';\n\nconst { BaseLayer, Overlay } = LayersControl;\n\nconst icon = new Icon({\n  iconUrl: require(\"../images/racks_icon.png\"),\n  iconSize: [30, 30]\n});\n\nconst center = [37.773943, -122.449484]\n\nexport default function RacksMap({racks}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n  console.log(racks)\n  return (\n      <div>\n\n        <div> \n        <Map center={[37.773943, -122.449484]} zoom={13.4}> \n            <TileLayer\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            />    \n\n            <LayersControl position=\"topright\" collapsed={false}>\n                \n                <BaseLayer name=\"2015-Present\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)>2014).map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.lat,\n                            rk.lon\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer name=\"2010-2014\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)>2009 && parseInt(rk.install_yr)<2015).map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.lat,\n                            rk.lon\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer checked name=\"2005-2009\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)>2004 && parseInt(rk.install_yr)<2010).map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.lat,\n                            rk.lon\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer name=\"Pre-2005\">\n                  <LayerGroup>\n                      {racks.filter(rk=>parseInt(rk.install_yr)<2005).map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.lat,\n                            rk.lon\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n\n                <BaseLayer name=\"All\">\n                  <LayerGroup>\n                      {racks.map( rk => (\n                        <Marker\n                          key={rk.objectid}\n                          position={[\n                            rk.lat,\n                            rk.lon\n                          ]}\n                          onClick={() => {\n                            {/* console.log(\"marker opened\") */}\n                            setActiveRack(rk);\n                          }}\n                          icon={icon}\n                        />\n                      ))}\n                  </LayerGroup>\n                </BaseLayer>\n                \n            </LayersControl>\n\n\n            {activeRack && (\n                  <Popup\n                    position={[\n                      activeRack.lat,\n                      activeRack.lon\n                    ]}\n                    onClose={() => {\n                      {/* console.log(\"marker closed\") */}\n\n                      setActiveRack(null);\n                    }}\n                  >\n                    <div>\n                      <h2>Spaces : {activeRack.spaces}</h2>\n                      <h2>Year Installed : {activeRack.install_yr}</h2>\n                      <h2>Street : {activeRack.street}</h2>\n                    </div>\n                  </Popup>\n            )}\n          </Map>\n        </div>\n  \n      </div>\n  );\n}","import { MapControl, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nclass Legend extends MapControl {\n  createLeafletElement(props) {}\n\n  componentDidMount() { \n\n    const legend = L.control({ position: \"topright\" });\n\n    legend.onAdd = () => {\n      const div = L.DomUtil.create(\"div\", \"info legend\");\n      const cats = [\"Light\", \"Medium\", \"Heavy\", \"Dense\"];\n      const backgroundColors = [\"green\",\"yellow\",\"red\",\"purple\"]\n      const letterColors = [\"white\",\"black\",\"white\",\"white\"]\n      let labels = [];\n\n      for (let i = 0; i < cats.length; i++) {\n        let level = cats[i];\n        let bColor = backgroundColors[i];\n        let tColor = letterColors[i];\n\n        labels.push(\n          '<i style=\"background:' +\n            bColor + ';color:' + tColor +';' +\n            '\"> ' +\n            level + '</i>'\n        );\n      }\n\n      div.innerHTML = labels.join(\"<br>\");\n      return div;\n    };\n\n    const { map } = this.props.leaflet;\n    legend.addTo(map);\n  }\n  \n  componentWillUnmount(){\n      //This overwrite original version wich attemped to remove too late and crashed site\n    //   console.log(\"this should replace old one\");\n  }\n}\n\nexport default withLeaflet(Legend);\n","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, Circle, MapControl } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\nimport Legend from './legend';\n\n\nexport default function RacksMap({traffic}) {\n  const [activeTraffic, setActiveTraffic] = React.useState(null);\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n\n              <Legend />\n    \n              {traffic.map(event => (\n                <Circle\n                  fillColor={ \n                    event.model6_vol > 700000 ? \"purple\" : \n                    event.model6_vol > 500000 ? \"red\" :\n                    event.model6_vol > 300000 ? \"gold\" :\n                    \"green\"\n                    }\n                  radius={200} \n                  fillOpacity={.4}\n                  stroke={false}\n                  key={event.objectid}\n                  center={[\n                    event.point.coordinates[1],\n                    event.point.coordinates[0]\n                  ]}\n                  onClick={() => {\n                    {/* console.log(\"marker opened\") */}\n                    setActiveTraffic(event);\n                  }}\n                />\n              ))}\n\n              \n              \n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\nconst icon = new Icon({\n  iconUrl: require(\"../images/crime.png\"),\n  iconSize: [35, 35]\n});\n\nexport default function CrimeMap({crime}) {\n  const [activeCrime, setActiveCrime] = React.useState(null);\n  return (\n          <div>\n            \n      \n            <div>\n              <Map center={[37.773943, -122.449484]} zoom={13.4}>\n      \n                <TileLayer\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n      \n                {crime.map(event => (\n                  <Marker\n                    key={event.incident_id+event.incident_number + (Math.floor(Math.random() *1000) )}\n                    position={[\n                      event.latitude,\n                      event.longitude\n                    ]}\n                    onClick={() => {\n                      {/* console.log(\"marker opened\") */}\n                      setActiveCrime(event);\n                    }}\n                    icon={icon}\n                  />\n                ))}\n      \n                {activeCrime && (\n                  <Popup\n                    position={[\n                      activeCrime.latitude,\n                      activeCrime.longitude\n                    ]}\n                    onClose={() => {\n                      {/* console.log(\"marker closed\") */}\n\n                      setActiveCrime(null);\n                    }}\n                  >\n                    <div>\n                      <h2>Police District : {activeCrime.police_district}</h2>\n                      <h2>Description : {activeCrime.incident_description}</h2>\n                      <h2>Resolution : {activeCrime.resolution}</h2>\n      \n                    </div>\n                  </Popup>\n                )}\n              </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React, { Component } from 'react'\nimport {\n  Circle,\n  FeatureGroup,\n  LayerGroup,\n  LayersControl,\n  Map,\n  Marker,\n  Popup,\n  Rectangle,\n  TileLayer,\n} from \"react-leaflet\"\nconst { BaseLayer, Overlay } = LayersControl\n\nconst center = [37.773943, -122.449484]\nconst rectangle = [\n  [37.773943, -122.449484],\n  [37.773943, -122.49],\n]\n\nexport default class LayersControlExample extends Component<{}> {\n  render() {\n    return (\n      <Map center={center} zoom={13}>\n        <LayersControl position=\"topright\" collapsed={false}>\n          <BaseLayer name=\"Color\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </BaseLayer>\n          <BaseLayer checked name=\"Black and White\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </BaseLayer>\n          <Overlay name=\"Injury\">\n            <Marker position={center}>\n              <Popup>\n                A pretty CSS3 popup. <br /> Easily customizable.\n              </Popup>\n            </Marker>\n          </Overlay>\n          <Overlay checked name=\"Fatal\">\n            <LayerGroup>\n              <Circle center={center} fillColor=\"blue\" radius={200} />\n              <Circle\n                center={center}\n                fillColor=\"red\"\n                radius={100}\n                stroke={false}\n              />\n              <LayerGroup>\n                <Circle\n                  center={[center[0], center[1]-0.05]}\n                  color=\"green\"\n                  fillColor=\"green\"\n                  radius={100}\n                />\n              </LayerGroup>\n            </LayerGroup>\n          </Overlay>\n          <Overlay name=\"Path\">\n            <FeatureGroup color=\"purple\">\n              <Popup>Popup for path</Popup>\n              <Rectangle bounds={rectangle} />\n            </FeatureGroup>\n          </Overlay>\n        </LayersControl>\n      </Map>\n    )\n  }\n}","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\nconst icon = new Icon({\n  iconUrl: require(\"../images/lights.png\"),\n  iconSize: [25, 30]\n});\n\nexport default function CrimeMap({lights}) {\n  const [activeLight, setActiveLight] = React.useState(null);\n  console.log(lights);\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              {lights.map(light => (\n                <Marker\n                  key={light.objectid}\n                  position={[\n                    light.point.coordinates[1],\n                    light.point.coordinates[0]\n                  ]}\n                  onClick={() => {\n                    {/* console.log(\"marker opened\") */}\n                    setActiveLight(light);\n                  }}\n                  icon={icon}\n                />\n              ))}\n    \n              {activeLight && (\n                <Popup\n                  position={[\n                    activeLight.point.coordinates[1],\n                    activeLight.point.coordinates[0]\n                  ]}\n                  onClose={() => {\n                    {/* console.log(\"marker closed\") */}\n\n                    setActiveLight(null);\n                  }}\n                >\n                  <div>\n                    <h2>Corner of {activeLight.street1} and {activeLight.street2}</h2>\n                  </div>\n                </Popup>\n              )}\n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React, { Component } from 'react'\nimport {\n  Circle,\n  FeatureGroup,\n  LayerGroup,\n  LayersControl,\n  Map,\n  Marker,\n  Popup,\n  Rectangle,\n  Polyline,\n  TileLayer,\n} from \"react-leaflet\"\nimport { Icon } from 'leaflet'\nconst { BaseLayer, Overlay } = LayersControl\n\nconst center = [37.773943, -122.449484]\nconst rectangle = [\n  [37.773943, -122.449484],\n  [37.773943, -122.49],\n]\n\nconst LightsIcon = new Icon({\n  iconUrl: require(\"../images/lights.png\"),\n  iconSize: [30, 30]\n});\n\nexport default function Routes({routes}) {\n    const [activeLight, setActiveLight] = React.useState(null);\n\n\n\n\n\n    // console.log(routes)\n    return (\n      <Map center={center} zoom={13}>\n        <LayersControl position=\"topright\" collapsed={false}>\n          <BaseLayer name=\"Color\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </BaseLayer>\n          <BaseLayer checked name=\"Black and White\">\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n          </BaseLayer>\n\n          <Overlay name=\"Lights\">\n            <LayerGroup>\n              {routes.lights.map(light => (\n                  <Marker\n                    key={light.objectid + (Math.floor(Math.random()*10000)*Math.floor(Math.random()*10000))}\n                    position={[\n                      light.point.coordinates[1],\n                      light.point.coordinates[0]\n                    ]}\n                    onClick={() => {\n                      {/* console.log(\"marker opened\") */}\n                      setActiveLight(light);\n                    }}\n                    icon={LightsIcon}\n                  />\n                ))}\n\n                {activeLight && (\n                <Popup\n                  position={[\n                    activeLight.point.coordinates[1],\n                    activeLight.point.coordinates[0]\n                  ]}\n                  onClose={() => {\n                    {/* console.log(\"marker closed\") */}\n\n                    setActiveLight(null);\n                  }}\n                >\n                  <div>\n                    <h2>Corner of {activeLight.street1} and {activeLight.street2}</h2>\n                  </div>\n                </Popup>\n              )}\n            </LayerGroup>\n          </Overlay>\n\n          <Overlay checked name=\"Paths\">\n            <LayerGroup>\n              {routes.paths.map(path=>(   \n              <FeatureGroup key={path.cnn + (Math.floor(Math.random()*10000)*Math.floor(Math.random()*10000))} color=\"green\">\n                <Popup>Bicycle paths (Class I) are off-street paved bikeways. They are separated from vehicle traffic, but are almost always shared with pedestrians</Popup>\n                <Polyline opacity={.35} color=\"lime\" positions={path.shape.coordinates} />\n              </FeatureGroup>\n              ))}\n            </LayerGroup>\n          </Overlay>\n\n          <Overlay checked name=\"Lanes\">\n          <LayerGroup>\n              {routes.lanes.map(path=>(   \n              <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000)*Math.floor(Math.random()*10000) )} color=\"orange\">\n                <Popup>A standard bike lane (Class II) is a portion of road reserved for the preferential or exclusive use of people biking, indicated by road markings.</Popup>\n                <Polyline opacity={.35} color=\"orange\" positions={path.shape.coordinates} />\n              </FeatureGroup>\n              ))}\n            </LayerGroup>\n          </Overlay>\n\n          <Overlay checked name=\"Routes\">\n          <LayerGroup>\n              {routes.routes.map(path=>(   \n              <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000)*Math.floor(Math.random()*10000) )} color=\"purple\">\n                <Popup>Shared lanes (Class III - sharrows) are typically wide travel lanes shared by bicyclists and vehicles.</Popup>\n                <Polyline opacity={.35} color=\"purple\" positions={path.shape.coordinates} />\n              </FeatureGroup>\n              ))}\n            </LayerGroup>\n          </Overlay>\n\n          <Overlay checked name=\"Seperated Bikeway\">\n          <LayerGroup>\n              {routes.seperated.map(path=>(   \n              <FeatureGroup key={path.cnn + (Math.floor(Math.random() *10000) )} color=\"blue\">\n                <Popup>Separated bikeways (Class IV), also commonly referred to as cycle tracks or protected bikeways, are bicycle facilities that are separated from traffic by parked cars, safe-hit posts, transit islands or other physical barriers.</Popup>\n                <Polyline opacity={.35} positions={path.shape.coordinates} />\n              </FeatureGroup>\n              ))}\n            </LayerGroup>\n          </Overlay>\n        </LayersControl>\n      </Map>\n    )\n  \n}","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"../App.css\";\n\n\nexport default function RacksMap({racks}) {\n  const [activeRack, setActiveRack] = React.useState(null);\n\n  return (\n          <div>\n            \n      \n            <div>\n            <Map center={[37.773943, -122.449484]} zoom={13.4}>\n    \n              <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              />\n    \n              \n            </Map>\n      \n            </div>\n      \n          </div>\n        );\n                \n      }","import React from \"react\";\nimport { Map, Marker, Popup, TileLayer, MapControl, withLeaflet } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\nimport \"./App.css\";\nimport Racks from \"./maps/racks\";\nimport Traffic from \"./maps/traffic\";\nimport Crime from \"./maps/crime\";\nimport Accidents from \"./maps/accidents\";\nimport Lights from \"./maps/lights\";\nimport Routes from \"./maps/routes\";\n\nimport All from \"./maps/all\";\n\n\nconst icon = new Icon({\n  iconUrl: require(\"./images/test.jpg\"),\n  iconSize: [25, 25]\n});\n\nclass App extends React.Component{\n\n  // SF Coordinates\n  // latitude:37.773943,\n  // longitude:-122.449484,\n\n  \n\n  constructor(){\n    super();\n    this.state={\n      mainMapSelection:\"traffic\",\n      bikeRacks : [],\n      crime : [],\n      accidents : [],\n      traffic: [],\n      routes: {}\n    }\n\n    this.changeMap = this.changeMap.bind(this);\n\n  }\n\n  componentDidMount(){\n\n    //fetch racks data\n    fetch(\"https://data.sfgov.org/resource/hn4j-6fx5.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      this.setState({\n        bikeRacks: data,\n      })\n    })\n\n    //fetch crime and accident data\n    fetch(\"https://data.sfgov.org/resource/wg3w-h783.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      let crimeData = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n      let accidentData = data.filter(crime=> crime.latitude && crime.incident_category === \"Traffic Collision\");\n      this.setState({\n        crime: crimeData,\n        accidents: accidentData\n      })\n    })\n\n    //fetch accident data\n    // fetch(\"https://data.sfgov.org/resource/nuek-vuh3.json\")\n    // .then(results=> {return results.json()})\n    // .then(data=>{\n    //   // console.log(data);\n    //   // let crimeData = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n    //   let accidentData = data.filter(acc=> acc.location.latitude && acc.call_type === \"Traffic Collision\");\n    //   // console.log(accidentData);\n    //   this.setState({\n    //     accidents: accidentData\n    //   })\n    // })\n\n    //fetch traffic data\n    fetch(\"https://data.sfgov.org/resource/awac-r27z.json\")\n    .then(results=> {return results.json()})\n    .then(data=>{\n      //data = data.filter(crime=> crime.latitude && crime.incident_category === \"Larceny Theft\");\n      this.setState({\n        traffic: data,\n      })\n    })\n\n    //https://data.sfgov.org/resource/ygmz-vaxd.json\n    //fetch Bicyle routes location\n    fetch(\"https://data.sfgov.org/resource/a5zr-cehj.json\")\n    .then(results=> {return results.json()})\n    .then(data1=>{\n      let routes = {};\n      routes.lights = data1;\n      fetch(\"https://data.sfgov.org/resource/ygmz-vaxd.json\")\n      .then(results=> {return results.json()})\n      .then(data2=>{\n        routes.paths = [];\n        routes.lanes = [];\n        routes.routes = [];\n        routes.seperated = [];\n        for (let i = 0; i < data2.length; i++) {\n          const ele = data2[i];\n          for (let j = 0; j < ele.shape.coordinates.length; j++) {\n            const coordEle = ele.shape.coordinates[j];\n            let longitude = coordEle[0];\n            let latitude = coordEle[1];\n            ele.shape.coordinates[j] = [latitude,longitude];\n          }\n          switch (ele.symbology) {\n            case \"BIKE ROUTE\":\n              routes.routes.push(ele);\n            break;\n\n            case \"BIKE PATH\":\n              routes.paths.push(ele);\n            break;\n\n            case \"SEPARATED BIKEWAY\":\n              routes.seperated.push(ele);\n            break;\n          \n            default:\n              routes.lanes.push(ele);\n            break;\n          }\n        }\n\n\n\n        this.setState({\n          routes: routes,\n        })\n      })\n    })\n\n    // console.log(\"state\",this.state.bikeRacks);\n\n\n  }\n\n  changeMap(newMap){\n      this.setState({\n        mainMapSelection : newMap\n      })\n  }\n\n  render(){\n    let mapDisplay;\n    switch (this.state.mainMapSelection) {\n      case \"racks\":\n        mapDisplay = (<Racks \n                        icon={icon}\n                        racks={this.state.bikeRacks}/>)\n        break;\n      case \"traffic\":\n        // console.log(\"chose traffic to display\")\n        mapDisplay = (<Traffic traffic={this.state.traffic}/>)\n        break;\n    \n      case \"crime\":\n        // console.log(\"chose traffic to display\")\n        mapDisplay = (<Crime crime={this.state.crime}/>)\n        break;\n\n      case \"routes\":\n          // console.log(\"chose routes to display\")\n          mapDisplay = (<Routes routes={this.state.routes}/>)\n          break;\n\n      case \"accidents\":\n        // console.log(\"chose accidents to display\")\n        mapDisplay = (<Accidents accidents={this.state.accidents}/>)\n        break;\n\n      case \"all\":\n        // console.log(\"chose all to display\")\n        mapDisplay = (<All \n                        crime={this.state.crime}\n                        accidents={this.state.accidents}\n                        racks={this.state.bikeRacks}\n                        traffic={this.state.traffic}\n                      />)\n        break;\n    \n      default:\n        break;\n    }\n\n\n    return (\n      <div>\n        <div>\n                <h1>\n                  SFRider: Biking SF Data\n                </h1>\n        </div>\n\n        <div className=\"tabs-wrapper\">\n          <div className=\"tabs\">\n            \n            <div className=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-1\" \n                      defaultChecked={this.state.mainMapSelection===\"traffic\"} \n                      className=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"traffic\")}}\n              />\n              <label htmlFor=\"tab-1\" className=\"tab-label\">Traffic</label>\n            </div>\n\n            <div className=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-2\" \n                      defaultChecked={this.state.mainMapSelection===\"racks\"} \n                      className=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"racks\")}}\n              />\n              <label htmlFor=\"tab-2\" className=\"tab-label\">Racks</label>\n            </div>\n\n            <div className=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-5\" \n                      defaultChecked={this.state.mainMapSelection===\"routes\"} \n                      className=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"routes\")}}\n              />\n              <label htmlFor=\"tab-5\" className=\"tab-label\">Routes</label>\n            </div>\n\n            <div className=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-4\" \n                      defaultChecked={this.state.mainMapSelection===\"crime\"} \n                      className=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"crime\")}}\n              />\n              <label htmlFor=\"tab-4\" className=\"tab-label\">Crime</label>\n            </div>\n\n            <div className=\"tab\">\n              <input type=\"radio\" \n                      name=\"css-tabs\" \n                      id=\"tab-6\" \n                      defaultChecked={this.state.mainMapSelection===\"all\"} \n                      className=\"tab-switch\"\n                      onClick={()=>{this.changeMap(\"all\")}}\n              />\n              <label htmlFor=\"tab-6\" className=\"tab-label\">All</label>\n            </div>\n\n          </div> \n        </div>\n\n        <div>\n          {mapDisplay}\n        </div>\n\n        \n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}